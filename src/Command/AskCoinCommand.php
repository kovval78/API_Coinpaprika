<?php

namespace App\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\Question;
use App\API\GetCoinsData;
use App\API\GetCoinsSymbol;
use App\API\GetResponse;
use App\Messages\FinalExchangeMessage;

class AskCoinCommand extends Command
{
    protected function configure()
    {
        $this->setName('ask:coins')
            ->setDescription('The command asks for the first and second cryptocurrency')
            ->setHelp('This command allows you to enter the cryptocurrency pair');

        parent::configure(); // TODO: Change the autogenerated stub
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $helper = $this->getHelper('question');

        $askFirstCurrency = $helper->ask($input, $output, new Question(
            "Enter your first cryptocurrency : ", "BTC"
        ));
        $askSecondCurrency = $helper->ask($input, $output, new Question(
            "Enter your second cryptocurrency : ", "USD"
        ));
        $currencyAmount = $helper->ask($input, $output, new Question(
            "Please enter the amount of the second cryptocurrency you want to buy for the first one. : ", 1
        ));

        bcscale(5);

// GetCoinsData
        $sendGetRequest = new GetCoinsData();
        $arrayCoinsData = $sendGetRequest->getCoins();
// GetCoinsData

// GetCoinsSymbol
        $coinsSymbol = new GetCoinsSymbol($arrayCoinsData, $askFirstCurrency, $askSecondCurrency);
        $askFirstCurrencyId = $coinsSymbol->askFirstCurrencyId;
        $askSecondCurrencyId = $coinsSymbol->askSecondCurrencyId;
// GetCoinsSymbol

// GetResponse
        $responsePrice = new GetResponse($askFirstCurrencyId, $askSecondCurrencyId);
        $priceFirstCurrency = $responsePrice->priceFirstCurrency;
        $priceSecondCurrency = $responsePrice->priceSecondCurrency;
// GetResponse

// FinalExchangeMessage
        $finalMessage = new FinalExchangeMessage($priceFirstCurrency, $priceSecondCurrency, $askFirstCurrency,$askSecondCurrency, $currencyAmount);
// FinalExchangeMessage

        $output->writeln($finalMessage->infoMessage);
        $output->writeln($finalMessage->finalMessage);
        return Command::SUCCESS;
    }
}