<?php

namespace App\Command;

use App\API\ApiClient;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\HttpClient\HttpClient;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\Question;
use Symfony\Contracts\HttpClient\ResponseInterface;

class AskCoinCommand extends Command
{
    protected function configure()
    {
        $this->setName('ask:coins')
            ->setDescription('The command asks for the first and second cryptocurrency')
            ->setHelp('This command allows you to enter the cryptocurrency pair');
//                ->addArgument('firstcoin',  InputArgument::REQUIRED, 'Enter the first currency: ')
//                ->addArgument('secondcoin', InputArgument::REQUIRED, 'Enter the second currency: ');

        parent::configure(); // TODO: Change the autogenerated stub

    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $helper = $this->getHelper('question');

        $askFirstCurrency = $helper->ask($input, $output, new Question(
            "Enter your first cryptocurrency : ", "BTC"
        ));
        $askSecondCurrency = $helper->ask($input, $output, new Question(
            "Enter your second cryptocurrency : ", "USD"
        ));
        $currencyAmount = $helper->ask($input, $output, new Question(
            "Please enter the amount of the second cryptocurrency you want to buy for the first one. : ", 1
        ));

        bcscale(5);

        $getapi = new ApiClient();
        $getapi->getCoins();

        $coins = $getapi->getCoins();
        $httpClient = $getapi->getCoins(); //zmienić nazwę


        $askFirstCurrencyId = null;
        $askSecondCurrencyId = null;
        foreach($coins as $coin) {
            if ($coin['symbol'] == $askFirstCurrency) {
                $askFirstCurrencyId = $coin['id'];
            }
            if ($coin['symbol'] == $askSecondCurrency) {
                $askSecondCurrencyId = $coin['id'];
            }
        }

        if ($askFirstCurrencyId == null || $askSecondCurrencyId == null) {
            echo "The currency with the symbol $askFirstCurrency or $askSecondCurrency was not found.";
            die();
        }


        $response = $httpClient->request('GET',
            'https://api.coinpaprika.com/v1/coins/' . $askFirstCurrencyId . '/ohlcv/today/'
        );
        $priceFirstCurrency = round($response->toArray()[0]['close'], 5);


        $response = $httpClient->request('GET',
            'https://api.coinpaprika.com/v1/coins/' . $askSecondCurrencyId . '/ohlcv/today/'
        );
        $priceSecondCurrency = round($response->toArray()[0]['close'], 5);


        $buyCurrency = bcdiv($priceSecondCurrency, $priceFirstCurrency);


        $infoMessage = "The price of the first currency ($askFirstCurrency) is: $priceFirstCurrency USD and the second ($askSecondCurrency) is: $priceSecondCurrency USD";
        $finalMessage = "You can buy $buyCurrency " . $askFirstCurrency . " for " . $currencyAmount . " pieces of " . $askSecondCurrency . " currencies.";

        $output->writeln($infoMessage);
        $output->writeln($finalMessage);

        return Command::SUCCESS;
    }
}